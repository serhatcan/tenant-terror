import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JFrame;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : TenantTerror
//  @ File Name : Simulation.java
//  @ Date : 11/11/2014
//  @ Author : Serhat CAN
//
//

// Singleton Class. There is only one instance of Simulation.
public class Simulation {

	private static Simulation simulation;

	HouseDecorator houseDecorator;

	public int countRentedFromOwner;
	public int countRentedFromBroker;
	public int moneySpentByStudents;
	public int moneyGainedByBrokers;

	public int numOfHouses;
	public int numOfBrokers;
	public int numOfStudents;

	public Display display;
	public List<Entity> entities;
	public DO dObject;

	private Simulation() {

		BrokerFactory bf = new BrokerFactory();

		entities = new ArrayList<Entity>();

		// default created two brokers.
		for (int i = 0; i < 2; i++) {
			entities.add(bf.produce(new ClosestFirst(this), this));
			numOfBrokers++;
		}

	}

	public static synchronized Simulation getInstance() {
		if (simulation == null) {
			simulation = new Simulation();
		}

		return simulation;
	}

	public void stepAll() {

		for (int i = 0; i < entities.size(); i++) {
			Entity e = entities.get(i);

			e.step(DO.deltaStepTime);

			// House decoration based on FromOwner or FromBroker

			if (e instanceof House) {

				House h = (House) e;

				if (!h.isFromOwner()) {
					if (!(e instanceof FromBroker)) {
						entities.set(i, new FromBroker(h, this));
					}
				}
			}

			if (e instanceof Broker) {

				Broker b = (Broker) e;

				// new startegy if needed
				if (e.strategy.isFinished) {
					Random r = new Random();
					int a = r.nextInt(3);
					switch (a) {
					case 0:
						e.strategy = new RandomMove(simulation);
					default:
						e.strategy = new ClosestFirst(simulation);
					}

					// decorate
					int bMoney = b.getMoney();

					if (bMoney >= 750 && bMoney < 1500) {

						if (!(e instanceof Poor)) {
							entities.set(i, new Poor(b));
						}

					} else if (bMoney >= 1500 && bMoney < 2250) {
						if (!(e instanceof MiddleClass)) {
							entities.set(i, new MiddleClass(b));
						}

					} else if (bMoney >= 2250) {
						if (!(e instanceof Rich)) {
							entities.set(i, new Rich(b));
						}

					}

				}

				if (e instanceof Student) {
					if (e.strategy.isFinished) {

						Random r = new Random();
						int a = r.nextInt(3);
						switch (a) {
						case 0:
							e.strategy = new CheapestFirst(simulation);
						default:
							e.strategy = new ClosestFirst(simulation);
						}

					}

				}

			}
		}
	}

	public static void main(String[] args) throws Exception {

		Simulation simulation = Simulation.getInstance();
		Display display = new Display(simulation);
		JFrame frame = new JFrame("Tenant Terror");

		TimerTask task = new ScheduledObjectCreator(simulation);

		Timer timer = new Timer();
		timer.schedule(task, 1000, 2000);

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.add(display);
		frame.pack();
		frame.setVisible(true);

		try {

			while (true) {
				simulation.stepAll();
				display.repaint();
				Thread.sleep(50);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
